// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: v1/api.proto

package pb

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_v1_api_proto struct{}

func (drpcEncoding_File_v1_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_v1_api_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_v1_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_v1_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_v1_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCQuasarServiceClient interface {
	DRPCConn() drpc.Conn

	Apply(ctx context.Context, in *Command) (*CommandResponse, error)
}

type drpcQuasarServiceClient struct {
	cc drpc.Conn
}

func NewDRPCQuasarServiceClient(cc drpc.Conn) DRPCQuasarServiceClient {
	return &drpcQuasarServiceClient{cc}
}

func (c *drpcQuasarServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcQuasarServiceClient) Apply(ctx context.Context, in *Command) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/quasar.v1.QuasarService/Apply", drpcEncoding_File_v1_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCQuasarServiceServer interface {
	Apply(context.Context, *Command) (*CommandResponse, error)
}

type DRPCQuasarServiceUnimplementedServer struct{}

func (s *DRPCQuasarServiceUnimplementedServer) Apply(context.Context, *Command) (*CommandResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCQuasarServiceDescription struct{}

func (DRPCQuasarServiceDescription) NumMethods() int { return 1 }

func (DRPCQuasarServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/quasar.v1.QuasarService/Apply", drpcEncoding_File_v1_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCQuasarServiceServer).
					Apply(
						ctx,
						in1.(*Command),
					)
			}, DRPCQuasarServiceServer.Apply, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterQuasarService(mux drpc.Mux, impl DRPCQuasarServiceServer) error {
	return mux.Register(impl, DRPCQuasarServiceDescription{})
}

type DRPCQuasarService_ApplyStream interface {
	drpc.Stream
	SendAndClose(*CommandResponse) error
}

type drpcQuasarService_ApplyStream struct {
	drpc.Stream
}

func (x *drpcQuasarService_ApplyStream) SendAndClose(m *CommandResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_v1_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
